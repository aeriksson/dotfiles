" vim config

" Requires vim-plug:
" `mkdir -p ~/.vim/autoload`
" `curl -fLo ~/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim`
"
" `mkdir -p ~/.vim/undodir` for persistent undo.

" Enable plugins
set nocompatible
filetype off

call plug#begin('~/.vim/plugged')

" Sensible defaults
Plug 'tpope/vim-sensible'
" Git integration
Plug 'tpope/vim-fugitive'
" Themes
Plug 'altercation/vim-colors-solarized'
Plug 'chriskempson/base16-vim'
" Easy commenting
Plug 'tomtom/tcomment_vim'
" Syntax checks
Plug 'scrooloose/syntastic'
" Autocomplete
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
if v:version >= 703
    " Better line numbering
    Plug 'myusuf3/numbers.vim'
endif
" Faster editing
Plug 'terryma/vim-multiple-cursors'
" Nicer statusline
Plug 'bling/vim-airline'
" Better undo
Plug 'mbbill/undotree'
" Better than grep
Plug 'rking/ag.vim'
" Colorful parentheses
Plug 'kien/rainbow_parentheses.vim'
" Syntax highlighting
Plug 'sheerun/vim-polyglot'
" Better S-expression editing
Plug 'vim-scripts/paredit.vim', { 'for': ['clojure', 'scheme'] }
" Nicer Clojure setup
Plug 'guns/vim-clojure-static'
" Highlight Clojure vars
Plug 'guns/vim-clojure-highlight'
" Fuzzy finding
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
" Fireplace
Plug 'tpope/vim-fireplace'
Plug 'tpope/vim-salve'
Plug 'edkolev/tmuxline.vim'

call plug#end()

let g:rbpt_colorpairs = [
  \ [ '13', '#6c71c4'],
  \ [ '5',  '#d33682'],
  \ [ '1',  '#dc322f'],
  \ [ '9',  '#cb4b16'],
  \ [ '3',  '#b58900'],
  \ [ '2',  '#859900'],
  \ [ '6',  '#2aa198'],
  \ [ '4',  '#268bd2'],
  \ ]

filetype plugin indent on

" General
set hlsearch
set smartcase
set viminfo='1000,<1000,s10,h,f1

" Text, tabs, indent
set expandtab
set shiftwidth=4
set tabstop=4
set linebreak
set smartindent
set wrap

" Enable persistent undo
if has('persistent_undo')
    set undodir=~/.vim/undodir
    set undofile
    set undoreload=10000
endif
set undolevels=1000

" Enable mouse
if has("mouse")
  set mouse=a
endif

" Use system clipboard
set clipboard+=unnamed

" Airline
let g:Powerline_symbols = 'fancy'

" Theme
syntax enable
set background=dark
let g:solarized_visibility = "high"
colorscheme solarized
" let base16colorspace=256 " Access colors present in 256 colorspace
" set t_Co=256 " 256 color mode
" set background=dark
" colorscheme base16-solarized-dark

" Syntastic
let g:syntastic_error_symbol = 'âœ—'
let g:syntastic_warning_symbol = '!'
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_cpp_checkers = ['cpplint']
let g:syntastic_cpp_cpplint_args = '--verbose=0'
let g:syntastic_python_flake8_args = '--ignore=E501'
let g:syntastic_check_on_open=1

" Line numbers
set number

" YouCompleteMe
let g:ycm_confirm_extra_conf = 0
" Keep from overriding syntax checker
let g:ycm_register_as_syntastic_checker = 0

" Use Syntastic linting in Python
let g:pymode_lint = 0

" Remember cursor position
autocmd BufReadPost *
\ if ! exists("g:leave_my_cursor_position_alone") |
\ if line("'\"") > 0 && line ("'\"") <= line("$") |
\ exe "normal g'\"" |
\ endif |
\ endif

" No folding
autocmd Syntax c,cpp,python normal zR

" Airline
let g:airline_powerline_fonts = 1

" Always enable editing (useful in vimdiff)
set noreadonly

" Align new rows with parentheses
autocmd Syntax c,cpp set cino=(0

set nocursorcolumn
set nocursorline
syntax sync minlines=256

" Save file using sudo
command Sudow w !sudo tee > /dev/null %

" Save/quit even when holding shift
command W w
command Q q
command WQ wq
command Wq wq

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Mark unwanted whitespace
set list
autocmd Syntax make,gitcommit set nolist

" delimit specific line width
if has('persistent_undo')
  autocmd Syntax c,cpp set colorcolumn=120
  autocmd Syntax python,clojure set colorcolumn=80
endif

" Clear search highlight.
nnoremap <silent> <c-i> :nohlsearch<CR><c-i>

function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" Clean up trailing whitespace.
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>

" Format whole file.
nmap _= :call Preserve("normal gg=G")<CR>

" Ctrl-P
let g:ctrlp_root_markers = ['\.git']
let g:ctrlp_by_filename = 1 " search by filename (not full path) as default.
let g:ctrlp_dotfiles = 0 " do not search inside dot files and dirs.
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others']

" Ctags
set tags=./tags;~/code

" Evaluate Clojure buffers on load
autocmd BufRead *.clj try | silent! Require | catch /^Fireplace/ | endtry

" Enable rainbow parentheses for all buffers
au VimEnter * RainbowParenthesesActivate
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" better C-t
nnoremap <C-t> :FZF<CR>

" Tmuxline config
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'c'    : ['#(whoami)', '#(uptime | cud -d " " -f 1,2,3)'],
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#I', '#W', '#F'],
      \'x'    : '#(date)',
      \'z'    : '#H'}

let g:syntastic_html_checkers=['']

let g:clojure_align_subforms = 1
