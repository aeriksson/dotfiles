" vim config

" Enable plugins
set nocompatible
filetype off

call plug#begin('~/.vim/plugged')

" Sensible defaults
Plug 'tpope/vim-sensible'
" Git integration
Plug 'tpope/vim-fugitive'
" Smart find/replace
Plug 'tpope/vim-abolish'
" Themes
Plug 'lifepillar/vim-solarized8'
Plug 'oyvinmar/vim-snazzy'
" Easy commenting
Plug 'tomtom/tcomment_vim'
" Linting
Plug 'dense-analysis/ale'
" " Autocomplete
" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
if v:version >= 703
    " Better line numbering
    Plug 'myusuf3/numbers.vim'
endif
" Faster editing
Plug 'mg979/vim-visual-multi'
" Nicer statusline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Better undo
Plug 'mbbill/undotree'
" Better than grep
Plug 'rking/ag.vim'
" Colorful parentheses
Plug 'luochen1990/rainbow'
" Syntax highlighting
Plug 'sheerun/vim-polyglot'
" Better S-expression editing
Plug 'vim-scripts/paredit.vim', { 'for': ['clojure', 'scheme'] }
" Nicer Clojure setup
Plug 'guns/vim-clojure-static'
" Highlight Clojure vars
Plug 'guns/vim-clojure-highlight'
" Fuzzy finding
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Dim inactive windows
Plug 'blueyed/vim-diminactive'
" Portable copy
Plug 'ojroques/vim-oscyank', {'branch': 'main'}

Plug 'github/copilot.vim'

Plug 'neovim/nvim-lspconfig'
Plug 'simrat39/rust-tools.nvim'

call plug#end()

let g:rbpt_colorpairs = [
  \ [ '13', '#6c71c4'],
  \ [ '5',  '#d33682'],
  \ [ '1',  '#dc322f'],
  \ [ '9',  '#cb4b16'],
  \ [ '3',  '#b58900'],
  \ [ '2',  '#859900'],
  \ [ '6',  '#2aa198'],
  \ [ '4',  '#268bd2'],
  \ ]

filetype plugin indent on

" General
set hlsearch
set smartcase
set viminfo='1000,<1000,s10,h,f1
set backupcopy=yes

" Text, tabs, indent
set expandtab
set shiftwidth=2
set tabstop=4
set smartindent
set wrap

" Enable persistent undo
if has('persistent_undo')
  set undodir=~/.vim/undodir
  set undofile
  set undoreload=10000
endif
set undolevels=1000

" Enable mouse
if has("mouse")
  set mouse=a
endif

" Use system clipboard
set clipboard=unnamedplus

let g:oscyank_silent = v:true

" Airline
let g:airline_theme='minimalist'
let g:airline_powerline_fonts = 1
let g:airline#extensions#branch#enabled = 0
let g:airline_section_y = ''
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_section_z = airline#section#create(['linenr', 'maxlinenr'])

" Theme
syntax enable
set termguicolors
set background=dark
colorscheme solarized8

" Syntastic
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '!'
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_cpp_checkers = ['cpplint']
let g:syntastic_cpp_cpplint_args = '--verbose=0'
let g:syntastic_python_flake8_args = '--ignore=E501'
let g:syntastic_check_on_open=1

" Line numbers
set number

" YouCompleteMe
let g:ycm_confirm_extra_conf = 0
" Keep from overriding syntax checker
let g:ycm_register_as_syntastic_checker = 0

" Use Syntastic linting in Python
let g:pymode_lint = 0

" Remember cursor position
autocmd BufReadPost *
\ if ! exists("g:leave_my_cursor_position_alone") |
\ if line("'\"") > 0 && line ("'\"") <= line("$") |
\ exe "normal g'\"" |
\ endif |
\ endif

" No folding
autocmd Syntax c,cpp,python normal zR

" Always enable editing (useful in vimdiff)
set noreadonly

" Align new rows with parentheses
autocmd Syntax c,cpp set cino=(0

set nocursorcolumn
set nocursorline
syntax sync minlines=256

" Save file using sudo
command Sudow w !sudo tee > /dev/null %

" Save/quit even when holding shift
command W w
command Q q
command WQ wq
command Wq wq
command E e
command Qa qa
command QA qa

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Mark unwanted whitespace
set list
set listchars=tab:→\ ,nbsp:∘,trail:•,precedes:«,extends:»
autocmd Syntax make,gitcommit set nolist

" delimit specific line width
autocmd Syntax c,cpp set colorcolumn=120
autocmd Syntax python,clojure set colorcolumn=88
autocmd Syntax clojure set colorcolumn=80
autocmd Syntax rust set colorcolumn=100
autocmd Syntax gitcommit set colorcolumn=50,72

" Clear search highlight.
nnoremap <silent> <c-u> :noh<CR>

function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" Clean up trailing whitespace.
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>

" Format whole file.
nmap _= :call Preserve("normal gg=G")<CR>

" Ctrl-P
let g:ctrlp_root_markers = ['\.git']
let g:ctrlp_by_filename = 1 " search by filename (not full path) as default.
let g:ctrlp_dotfiles = 0 " do not search inside dot files and dirs.
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others']

" Ctags
set tags=./tags;~/code

" Evaluate Clojure buffers on load
autocmd BufRead *.clj try | silent! Require | catch /^Fireplace/ | endtry

" Enable rainbow parentheses for all buffers
let g:rainbow_active = 1

" better C-t
nnoremap <C-t> :FZF<CR>

" Tmuxline config
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'c'    : ['#(whoami)', '#(uptime | cud -d " " -f 1,2,3)'],
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#I', '#W', '#F'],
      \'x'    : '#(date)',
      \'z'    : '#H'}

let g:syntastic_html_checkers=['']

let g:clojure_align_subforms = 1

if has("nvim")
  set inccommand=nosplit
endif

function! CljstyleFix(buffer) abort
    " TODO: figure this out
    return {
    \   'command': 'cljstyle fix %s',
    \   'read_temporary_file': 1
    \}
endfunction

autocmd FileType sh setlocal shiftwidth=2 tabstop=2
autocmd FileType css setlocal shiftwidth=2 tabstop=2

" Make n/N consistent regardless of whether a seach was started via / or ?
nnoremap <expr> n 'Nn'[v:searchforward].(&fdo=~'search\\|all'?'zv':'')
nnoremap <expr> N 'nN'[v:searchforward].(&fdo=~'search\\|all'?'zv':'')

au BufRead,BufNewFile *.tf set filetype=terraform

let g:diminactive_enable_focus = 1

" TODO: cleanup
let g:clojure_align_subforms = 1
autocmd FileType clojure setlocal lispwords+=GET,POST,PUT,DELETE,HEAD,ANY,context,cond
let g:clojure_fuzzy_indent_patterns = ['^with', '^def', '^let', '^\.']
let g:clojure_special_indent_words = 'deftype,defrecord,reify,proxy,extend-type,extend-protocol,letfn,defservice'

" Vag calls ripgrep with the provided args and opens the results in new tabs
command! -nargs=+ Vag call Vag(<f-args>)
function! Vag(...)
  let cmd = 'rg --max-count 1 --vimgrep ' . join(a:000, ' ')
  for line in split(system(cmd), '\n')
    let parts = split(line, ':')
    let filepath = parts[0]
    let line_number = parts[1]
    execute 'tabnew' filepath
    execute line_number
  endfor
endfunction

function! EscapeForRegex(text)
  return substitute(a:text, '[\.*\\[\\]^$~&]', '\\&', 'g')
endfunction

" & runs ripgrep+fzf for the word under the cursor
nnoremap & :execute 'RG ' . EscapeForRegex(expand('<cword>'))<CR>
xnoremap & :<C-u>execute 'RG ' . EscapeForRegex(shellescape(expand('<cword>')))<CR>

" Lookback in Clojure
let g:paredit_lookback=10000
let g:paredit_matchlines=10000
let g:clojure_maxlines=10000

" make command line feel more like bash
cnoremap <C-a> <Home>
cnoremap <C-k> <C-\>e strpart(getcmdline(), 0, getcmdpos() - 1)<CR>

if has('nvim')
  lua << EOF

  vim.lsp.set_log_level("info")

  local rt = require("rust-tools")

  rt.setup({
    tools = {
      autoSetHints = true,
      inlay_hints = {
        show_parameter_hints = true,
        parameter_hints_prefix = "<- ",
        other_hints_prefix = "=> "
      }
    },
    server = {
      on_attach = function(_, bufnr)
        -- Hover actions
        vim.keymap.set("n", "<C-space>", rt.hover_actions.hover_actions, { buffer = bufnr })
        -- Code action groups
        vim.keymap.set("n", "<Leader>a", rt.code_action_group.code_action_group, { buffer = bufnr })
      end,
    },
  })
EOF

  lua << EOF
  local opts = { noremap=true, silent=true }
  vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
  vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
  vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
  vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)

  -- Use an on_attach function to only map the following keys
  -- after the language server attaches to the current buffer
  local on_attach = function(client, bufnr)
    -- Enable completion triggered by <c-x><c-o>
    vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

    -- Mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    local bufopts = { noremap=true, silent=true, buffer=bufnr }
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
    vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
    vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
    vim.keymap.set('n', '<space>wl', function()
      print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
    end, bufopts)
    vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
    vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)
    vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
    vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
    vim.keymap.set('n', '<space>f', function() vim.lsp.buf.format { async = true } end, bufopts)
  end

  require('lspconfig').clojure_lsp.setup{}
EOF
endif

highlight DiagnosticUnderlineError gui=underline cterm=underline guifg=#FF0000
highlight DiagnosticUnderlineWarn gui=underline cterm=underline guifg=#FFA500

autocmd FileType rust LspStart

augroup RustFmt
  autocmd!
  autocmd BufWritePre *.rs RustFmt
augroup END

" NOTE: ALE's built-in clj-kondo linter doesn't handle col ranges, which
" breaks the highlighting when using neovim's built-in diagnostics API.

call ale#Set('clojure_clj_kondo_options', '--cache --config ''{:output {:format :json}}''')

function! GetCljKondoCommand(buffer) abort
    let l:options = ale#Var(a:buffer, 'clojure_clj_kondo_options')

    let l:command = 'clj-kondo'
    \   . ale#Pad(l:options)
    \   . ' --lint -'
    \   . ' --filename %s'

    return l:command
endfunction

function! HandleCljKondoJSON(buffer, lines) abort
    let l:findings = json_decode(join(a:lines, ''))['findings']
    let l:output = []
    for l:finding in l:findings
        let l:type = l:finding.level ==# 'warning' ? 'W' : 'E'
        let l:end_row = get(l:finding, 'end-row', l:finding.row)
        let l:end_col = get(l:finding, 'end-col', l:finding.col + 1) - 1
        call add(l:output, {
        \   'lnum': l:finding.row,
        \   'col': l:finding.col,
        \   'end_lnum': l:end_row,
        \   'end_col': l:end_col,
        \   'text': l:finding.message,
        \   'type': l:type,
        \})
    endfor
    return l:output
endfunction

call ale#linter#Define('clojure', {
\   'name': 'clj-kondo',
\   'output_stream': 'stdout',
\   'executable': 'clj-kondo',
\   'command': function('GetCljKondoCommand'),
\   'callback': 'HandleCljKondoJSON',
\})

call ale#fix#registry#Add('cljstyle',
                        \ 'CljstyleFix',
                        \ ['clj', 'cljc', 'cljs', 'edn'],
                        \ 'Fix Clojure/EDN with cljstyle.')

call ale#linter#PreventLoading('clojure')

highlight ALEWarning gui=underline
highlight ALEError gui=underline
highlight ALEVirtualTextError guifg=DarkRed
highlight ALEVirtualTextWarning guifg=DarkYellow

let g:ale_fixers = {'python': ['ruff_format'], 'clojure': ['cljstyle']}
let g:ale_linters = {'python': ['ruff'], 'clojure': ['clj-kondo']}

nnoremap <C-PageDown> <Nop>
nnoremap <C-PageUp> <Nop>
nnoremap <C-End> <Nop>
nnoremap <C-Home> <Nop>
nnoremap <C-ScrollWheelUp> <Nop>
nnoremap <C-ScrollWheelDown> <Nop>

autocmd FileType * syntax keyword Todo REF NOTE containedin=ALLCOMMENTS
